version: '3.7'

services:

  redis:
    image: redis:alpine
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - frontend
    deploy:
      endpoint_mode: dnsrr
  
  db:
    image: postgres:9.6
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      endpoint_mode: dnsrr

  vote:
    image: rayvittum/vote
    networks:
      - frontend
      - proxy
    deploy:
      replicas: 2
      labels:
        - traefik.port=80
        - traefik.frontend.rule=Host:vote.horsesizedduck.site

  result:
    image: rayvittum/result
    networks:
      - backend
      - proxy
    deploy:
      replicas: 2
      labels:
        - traefik.port=80
        - traefik.frontend.rule=Host:result.horsesizedduck.site
        - traefik.backend.loadbalancer.stickiness=true

  worker:
    image: rayvittum/worker
    #image: bretfisher/examplevotingapp_worker:java
    networks:
      - frontend
      - backend
    deploy:
      replicas: 2

   traefik:
    image: traefik:1.7-alpine
    networks:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # traefik dashboard
    command:
      # Use your favourite settings here, but add:
      - --docker
      - --docker.swarmMode
      - --docker.domain=traefik
      - --docker.network=proxy
      - --docker.watch
      - --api
      - --defaultentrypoints=http,https
      - --entryPoints=Name:https Address::443 TLS
      - --entryPoints=Name:http Address::80 # don't force HTTPS

    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - traefik.port=8080
        - traefik.frontend.rule=Host:traefik.horsesizedduck.site
  
  viz:
    image: dockersamples/visualizer
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 4040:8080
      
networks:
  frontend: {}
  backend: {}
  proxy:
    external: true

volumes:
  db-data:
  redis-data:
